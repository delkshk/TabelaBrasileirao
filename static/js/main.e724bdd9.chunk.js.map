{"version":3,"sources":["components/TabelaBrasileiro/Legenda.jsx","components/TabelaBrasileiro/index.js","components/TabelaBrasileiro/TabelaBrasileiro.jsx","components/Header/index.js","components/Header/Header.jsx","App.js","serviceWorker.js","index.js"],"names":["Legenda","state","class","className","icon","faCircle","data-posicao","Component","TabelaBrasileiro","sessionStorage","getItem","axios","get","headers","Authorization","then","res","data","setState","setItem","JSON","stringify","console","log","parse","this","map","time","posicao","key","nome_popular","variacao_posicao","faArrowUp","faArrowDown","pontos","jogos","vitorias","empates","derrotas","gols_pro","gols_contra","saldo_gols","aproveitamento","Header","faTrophy","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e724bdd9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faCircle\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nclass Legenda extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div class=\"legendaComponent\">\r\n        <div className=\"indice\">\r\n          <span class=\"Libertadores\">\r\n            <FontAwesomeIcon icon={faCircle} />\r\n            <b>Libertadores</b>\r\n          </span>\r\n          <span class=\"Pre-Libertadores\">\r\n            <FontAwesomeIcon icon={faCircle} />\r\n            <b>Pré-Libertadores</b>\r\n          </span>\r\n          <span class=\"Sul-Americana\">\r\n            <FontAwesomeIcon icon={faCircle} />\r\n            <b>Sul-Americana</b>\r\n          </span>\r\n          <span class=\"Rebaixados\">\r\n            <FontAwesomeIcon icon={faCircle} />\r\n            <b>Rebaixados</b>\r\n          </span>\r\n        </div>\r\n\r\n        <ul class=\"legenda\">\r\n          <li>PT - Pontos</li>\r\n          <li>JG - Jogos</li>\r\n          <li>VT - Vitorias</li>\r\n          <li>EP - Empates</li>\r\n          <li>DR - Derrotas</li>\r\n          <li>GP - Gols pró</li>\r\n          <li>GC - Gols contra</li>\r\n          <li>SG - Saldo de gols</li>\r\n          <li>AP - Aproveitamento</li>\r\n        </ul>\r\n        <div className=\"time pos legenda\" data-posicao=\"15\">\r\n          <div className=\"posicao\">\r\n            <span></span>\r\n          </div>\r\n          <div className=\"nome\">\r\n            <span>Time</span>\r\n          </div>\r\n          <div className=\"infos\">\r\n            <span className=\"variacao manteve\"></span>\r\n            <span>PT</span>\r\n            <span>JG</span>\r\n            <span>VT</span>\r\n            <span>EP</span>\r\n            <span>DR</span>\r\n            <span>GP</span>\r\n            <span>GC</span>\r\n            <span>SG</span>\r\n            <span className=\"aproveitamento\">AP</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Legenda;\r\n","import TabelaBrasileiro from \"./TabelaBrasileiro\";\r\nexport default TabelaBrasileiro;","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./TabelaBrasileiro.scss\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport Legenda from \"./Legenda\";\r\nimport {\r\n  faCircle,\r\n  faArrowUp,\r\n  faArrowDown,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nclass JogoAoVivo extends Component {\r\n  state = {\r\n    TabelaBrasileiro: [],\r\n  };\r\n  componentDidMount() {\r\n    if (sessionStorage.getItem(\"Tabela\") === null) {\r\n      axios\r\n        .get(`https://api.api-futebol.com.br/v1/campeonatos/10/tabela`, {\r\n          headers: {\r\n            Authorization: \"Bearer live_be6c136123f24f36c8c815e39d050e\",\r\n          },\r\n        })\r\n        .then((res) => {\r\n          const TabelaBrasileiro = res.data;\r\n          this.setState({ TabelaBrasileiro });\r\n          sessionStorage.setItem(\"Tabela\", JSON.stringify(TabelaBrasileiro));\r\n          console.log(\"setitem\");\r\n        });\r\n    } else {\r\n      const TabelaBrasileiro = JSON.parse(sessionStorage.getItem(\"Tabela\"));\r\n      this.setState({ TabelaBrasileiro });\r\n      console.log(\"getitem\");\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div class=\"TabelaBrasileiro\">\r\n        <h2>Campeonato Brasileiro</h2>\r\n\r\n        <div className=\"classificacao\">\r\n          <Legenda></Legenda>\r\n          <div className=\"tabela\">\r\n            {this.state.TabelaBrasileiro.map((time) => (\r\n              <div\r\n                className={\"time pos\" + time.posicao}\r\n                key={time.posicao}\r\n                data-posicao={time.posicao}\r\n              >\r\n                <div className=\"posicao\">\r\n                  <FontAwesomeIcon icon={faCircle} />\r\n                  <span>{time.posicao}°</span>\r\n                </div>\r\n                <div className=\"nome\">\r\n                  <span>{time.time.nome_popular}</span>\r\n                </div>\r\n                <div className=\"infos\">\r\n                  {(() => {\r\n                    if (time.variacao_posicao > 0) {\r\n                      return (\r\n                        <span className=\"variacao positiva\">\r\n                          <FontAwesomeIcon icon={faArrowUp} />{\" \"}\r\n                          {time.variacao_posicao}\r\n                        </span>\r\n                      );\r\n                    } else if (time.variacao_posicao < 0) {\r\n                      return (\r\n                        <span className=\"variacao negaviva\">\r\n                          <FontAwesomeIcon icon={faArrowDown} />{\" \"}\r\n                          {time.variacao_posicao * -1}\r\n                        </span>\r\n                      );\r\n                    } else {\r\n                      return <span className=\"variacao manteve\"></span>;\r\n                    }\r\n                  })()}\r\n                  <span>{time.pontos}</span>\r\n                  <span>{time.jogos}</span>\r\n                  <span>{time.vitorias}</span>\r\n                  <span>{time.empates}</span>\r\n                  <span>{time.derrotas}</span>\r\n                  <span>{time.gols_pro}</span>\r\n                  <span>{time.gols_contra}</span>\r\n                  <span>{time.saldo_gols}</span>\r\n                  <span className=\"aproveitamento\">\r\n                    {time.aproveitamento} %\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default JogoAoVivo;\r\n","import Header from './Header';\r\nexport default Header;","import React, { Component } from 'react';\r\nimport \"./Header.scss\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faTrophy,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nclass Header extends Component {\r\n    state = {  }\r\n    render() { \r\n        return ( \r\n        <div className=\"header\">\r\n            <FontAwesomeIcon icon={faTrophy} />\r\n        </div> \r\n        );\r\n    }\r\n}\r\n \r\nexport default Header;","import React, { Component }from 'react';\nimport './App.css';\n\n\nimport TabelaBrasileiro from \"./components/TabelaBrasileiro\";\nimport Header from \"./components/Header\"\n\nclass App extends Component {\n  render(){\n    return (\n      <div className=\"App\">\n          <Header></Header>\n          <TabelaBrasileiro></TabelaBrasileiro>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}